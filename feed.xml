<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://crfroehlich.github.io/cellar/feed.xml" rel="self" type="application/atom+xml" /><link href="https://crfroehlich.github.io/cellar/" rel="alternate" type="text/html" /><updated>2021-10-31T20:37:47-05:00</updated><id>https://crfroehlich.github.io/cellar/feed.xml</id><title type="html">luddites, inc.</title><subtitle>A journey of one person hiking their desk</subtitle><entry><title type="html">Beginings</title><link href="https://crfroehlich.github.io/cellar/2021/10/29/start.html" rel="alternate" type="text/html" title="Beginings" /><published>2021-10-29T00:00:00-05:00</published><updated>2021-10-29T00:00:00-05:00</updated><id>https://crfroehlich.github.io/cellar/2021/10/29/start</id><content type="html" xml:base="https://crfroehlich.github.io/cellar/2021/10/29/start.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-10-29-start.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-typescript&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_html rendered_html output_subarea output_execute_result&quot;&gt;
&lt;div style=&quot;background:#ffecb3;padding:1em;border-left:2px solid #ff6d00&quot;&gt;&lt;b&gt;Configuration is not found!&lt;/b&gt; Default configuration will be used: &lt;pre&gt;{&quot;module&quot;:1,&quot;target&quot;:1,&quot;moduleResolution&quot;:2,&quot;esModuleInterop&quot;:true}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Blogging to the Oldies</title><link href="https://crfroehlich.github.io/cellar/logging/code/tech/2020/10/04/blogging-to-the-oldies.html" rel="alternate" type="text/html" title="Blogging to the Oldies" /><published>2020-10-04T00:00:00-05:00</published><updated>2020-10-04T00:00:00-05:00</updated><id>https://crfroehlich.github.io/cellar/logging/code/tech/2020/10/04/blogging-to-the-oldies</id><content type="html" xml:base="https://crfroehlich.github.io/cellar/logging/code/tech/2020/10/04/blogging-to-the-oldies.html">&lt;h2 id=&quot;reality-meet-opportunity&quot;&gt;Reality, Meet Opportunity&lt;/h2&gt;

&lt;p&gt;For quite a while now, I have wanted to update my blog, do some more writing (both personally and professionally) and generally flex some unused muscles a bit. Fortuna often has sadistic tendencies as some can attest. Consider the recent toppling of the &lt;a href=&quot;https://www.sec.gov/litigation/litreleases/2020/lr24905.htm&quot;&gt;NS8 empire&lt;/a&gt; &lt;a href=&quot;https://www.wsj.com/articles/former-head-of-cyber-fraud-detection-startup-ns8-arrested-on-fraud-charges-11600469207&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.pacermonitor.com/public/case/36301258/United_States_Securities_and_Exchange_Commission_v_Rogas_et_al&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://www.forbes.com/sites/davidjeans/2020/09/18/how-a-cyber-fraud-company-ceo-raised-123-million-in-months---and-got-arrested-for-fraud/amp&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://www.reviewjournal.com/business/sec-charges-former-ceo-of-tech-company-with-fraud-2123503/&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;https://www.justice.gov/usao-sdny/press-release/file/1317641/download&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/pulse/ns8-demonstrates-how-employment-data-can-valuable-richard-stiennon&quot;&gt;6&lt;/a&gt; and a &lt;a href=&quot;https://www.formds.com/issuers/ns8-inc&quot;&gt;great fall of nepotism&lt;/a&gt; with &lt;a href=&quot;https://www.justice.gov/usao/justice-101/preliminary-hearing&quot;&gt;recent developments&lt;/a&gt; and &lt;a href=&quot;https://www.reviewjournal.com/business/laid-off-workers-sue-tech-company-citing-lack-of-advance-notice-2124501/&quot;&gt;former employee actions&lt;/a&gt;. So many links to criminal conspiracy to defraud and so little daylight; regardless, I have had more than a little time to navel gaze in recent weeks.&lt;/p&gt;

&lt;p&gt;I’ve long been frustrated by the available tools for blogging. Some of these goals compete with each other and some are onerous due to costs–I want as much of my platform to be free (both as in beer and as in speech) as possible &lt;em&gt;and&lt;/em&gt; I want as much control over my platform as possible &lt;em&gt;and&lt;/em&gt; I want to have features like commenting and search and analytics &lt;em&gt;and&lt;/em&gt; there can be no ads and the word &lt;em&gt;Jekyll&lt;/em&gt; may not be invoked. I have an old &lt;a href=&quot;https://hiking.luddites.me&quot;&gt;Blogger site&lt;/a&gt;, which I desperately want to retire; and I have a &lt;a href=&quot;https://medium.com/@christopher.r.froehlich&quot;&gt;Medium site&lt;/a&gt; which I am increasingly frustrated with: from the inability to post articles in the past to Mediums idiotic approach to monetization–what was initially cool about medium is no longer interesting to me.&lt;/p&gt;

&lt;p&gt;So I set out to figure out how to create the blog platform you, dear reader, are currently (hopefully) enjoying.&lt;/p&gt;

&lt;h3 id=&quot;goals&quot;&gt;Goals&lt;/h3&gt;

&lt;p&gt;Broadly speaking, I want to be able to meet these objectives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easy to add new posts&lt;/li&gt;
  &lt;li&gt;Easy to update existing posts&lt;/li&gt;
  &lt;li&gt;Keep revision history of edits&lt;/li&gt;
  &lt;li&gt;Blog is searchable&lt;/li&gt;
  &lt;li&gt;Commenting in some form is possible, and comments are stored in my control&lt;/li&gt;
  &lt;li&gt;No ads (at least for now)&lt;/li&gt;
  &lt;li&gt;Service is free for me to host my content and free for consumers&lt;/li&gt;
  &lt;li&gt;I can more or less change anything about the blog at whim&lt;/li&gt;
  &lt;li&gt;Fast to manage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;non-starters&quot;&gt;Non-starters&lt;/h3&gt;

&lt;p&gt;I considered a number of options, and I won’t go too deep into the pros and cons so much as leave breadcrumbs for others to follow (in no particular order):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com&quot;&gt;Medium&lt;/a&gt;: it looks nice, but I have to surrender too much control. It’s not free as in speech or free as in lattes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogger.com&quot;&gt;Blogger&lt;/a&gt;: it looks dated. It does most of what I need, but it’s slow to manage and cumbersome to maintain.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ghost.org&quot;&gt;Ghost&lt;/a&gt;: it used to be a nice competitor to Medium, but the target audience for users no longer includes me. It’s free to self-host, but non-trivial to manage.&lt;/li&gt;
  &lt;li&gt;All other self-hosted solutions (Ghost included): while I &lt;em&gt;can&lt;/em&gt; run anything on my local systems, I don’t want to depend on my personal equipment to run my site and I don’t want to have to deal with security (although services like &lt;a href=&quot;https://ngrok.com&quot;&gt;Ngrok&lt;/a&gt; and &lt;a href=&quot;https://pagekite.net/&quot;&gt;Pagekite&lt;/a&gt; are awesome and definitely worth your time).&lt;/li&gt;
  &lt;li&gt;Cloud hosting options are a mixed bag when looking for free. You can get lots of usage out of &lt;a href=&quot;https://azure.com&quot;&gt;Azure&lt;/a&gt; on the initial free options, but eventually you have to pay.&lt;/li&gt;
  &lt;li&gt;WordPress/Drupal/etc. Will never use; will not investigate.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;One “blog” concept that I’ve always liked is by &lt;a href=&quot;https://twitter.com/raganwald&quot;&gt;@raganwald&lt;/a&gt; is his use of &lt;a href=&quot;https://github.com/raganwald/raganwald.github.com/tree/master/_posts&quot;&gt;Github&lt;/a&gt; for organizing content. I have long considered this approach as it checks off a lot of boxes:&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Complete control&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Free as in latkes and free as in peaceful protests&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;It’s git, so it’s all under control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The perceived negatives I have had in the past seem to be less of an issue these days with the emergence of a few factors (some relatively new, some a bit older):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;: a free static content website based on the content of a branch of your repository. Commonly the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch, which is how this blog is served.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;: Manage your updates to Github Pages automatically&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/features/codespaces&quot;&gt;Github Codespaces&lt;/a&gt;: Everything you need to manage your site, in your browser. This is a very nice to have–you can do this anywhere/anytime already with other tools.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;GatsbyJs&lt;/a&gt;: A pretty slick static site generator based on React. Lots of extensions and pluggability.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/utterance/utterances&quot;&gt;Comments&lt;/a&gt;: Using a tool called Utterances, which is just a convenient wrapper around Github Issues–commenting is free and easy and completely under my control.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.algolia.com/&quot;&gt;Search&lt;/a&gt;: This is the only 3rd party piece that I cannot take and move just anywhere, but it’s free as in pancakes for my purposes, so I’ll content with it for now and/or until I need something better.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting-there&quot;&gt;Getting There&lt;/h3&gt;

&lt;p&gt;I did some basic soul googling for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog github pages -jekyll&lt;/code&gt; and quickly found &lt;a href=&quot;https://codesandtags.github.io/blog/creating-my-blog-with-gatsby-and-github-pages&quot;&gt;Creating my blog with Gatsby and Github Pages&lt;/a&gt;, which was more than enough to get me going. I explored a variety of &lt;a href=&quot;https://www.gatsbyjs.com/starters/?v=2&quot;&gt;Gatsby Templates&lt;/a&gt; (once I had decided that Gatsby would meet all my needs) and I picked the &lt;a href=&quot;https://www.gatsbyjs.com/starters/hasura/gatsby-gitbook-starter/&quot;&gt;Gitbook Starter&lt;/a&gt; template as a base. There were a variety of things I needed to change–most notably the logic for generating the sidebar tree, which required comparing the &lt;a href=&quot;https://github.com/hasura/gatsby-gitbook-starter&quot;&gt;template repo&lt;/a&gt; with the &lt;a href=&quot;https://github.com/hasura/learn-graphql/tree/master/tutorials/graphql/intro-graphql/tutorial-site&quot;&gt;demo repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of my time was occupied fixing annoyances–I spent more than a few hours wrestling with the &lt;a href=&quot;https://github.com/tschaub/gh-pages&quot;&gt;gh-pages&lt;/a&gt; module that I use for automating deploys to, you guessed it, Github Pages. The production build process for Gatsby is much slower than I would like, which is especially annoying in the early phases of development when you’re making lots of minor tweaks and changes. Combine that with trying to guarantee that I cache bust my site with new deploys, the general speed of build+deploy, local caching issues, remote caching issues–and I easily spent most of a day refreshing my browser in a state of uncertainty as to whether I was testing the right version of my code. Once I generally worked through my self-inflicted CI/CD pipeline issues, I am very satisfied with what I was able to throw together over a day and a half.&lt;/p&gt;

&lt;h2 id=&quot;outstanding-concerns&quot;&gt;Outstanding Concerns&lt;/h2&gt;

&lt;p&gt;One of the fun bits of doing all this work is that it’s a beautiful combination of development work, writing and designing–all of which I love. I get to keep polishing my dev chops as I work through my backlog of blog posts to migrate as well as explore new technologies and solutions to my own little set of concerns. I’ve historically struggled to find a development problem that aligns with my personal interests, and for the first time I feel like I have the beginnings of a solution here.&lt;/p&gt;

&lt;p&gt;Still, much remains todo if I want to consider this feature complete:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add analytics so I can measure traffic.&lt;/li&gt;
  &lt;li&gt;Some form of management for comments.&lt;/li&gt;
  &lt;li&gt;Find alternate ways to authenticate for comments so not everyone needs to have a Github account to comment.&lt;/li&gt;
  &lt;li&gt;Fix some rendering issues on page load.&lt;/li&gt;
  &lt;li&gt;Tagging and other basic “bloggy” features.&lt;/li&gt;
  &lt;li&gt;Migrate all my old content over.&lt;/li&gt;
  &lt;li&gt;Refactor the whole thing to TypeScript, because {reasons}.&lt;/li&gt;
  &lt;li&gt;Refactor the whole thing from TypeScript to Rust, because…why not?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of this has been interesting, please let me know in the comments or in &lt;a href=&quot;https://github.com/crfroehlich/blog&quot;&gt;the code, which is the blog, which is the code, which…&lt;/a&gt;!&lt;/p&gt;</content><author><name>CF</name></author><category term="logging" /><category term="code" /><category term="tech" /><summary type="html">Reality, Meet Opportunity For quite a while now, I have wanted to update my blog, do some more writing (both personally and professionally) and generally flex some unused muscles a bit. Fortuna often has sadistic tendencies as some can attest. Consider the recent toppling of the NS8 empire 1, 2, 3, 4, 5, 6 and a great fall of nepotism with recent developments and former employee actions. So many links to criminal conspiracy to defraud and so little daylight; regardless, I have had more than a little time to navel gaze in recent weeks. I’ve long been frustrated by the available tools for blogging. Some of these goals compete with each other and some are onerous due to costs–I want as much of my platform to be free (both as in beer and as in speech) as possible and I want as much control over my platform as possible and I want to have features like commenting and search and analytics and there can be no ads and the word Jekyll may not be invoked. I have an old Blogger site, which I desperately want to retire; and I have a Medium site which I am increasingly frustrated with: from the inability to post articles in the past to Mediums idiotic approach to monetization–what was initially cool about medium is no longer interesting to me. So I set out to figure out how to create the blog platform you, dear reader, are currently (hopefully) enjoying. Goals Broadly speaking, I want to be able to meet these objectives: Easy to add new posts Easy to update existing posts Keep revision history of edits Blog is searchable Commenting in some form is possible, and comments are stored in my control No ads (at least for now) Service is free for me to host my content and free for consumers I can more or less change anything about the blog at whim Fast to manage Non-starters I considered a number of options, and I won’t go too deep into the pros and cons so much as leave breadcrumbs for others to follow (in no particular order): Medium: it looks nice, but I have to surrender too much control. It’s not free as in speech or free as in lattes. Blogger: it looks dated. It does most of what I need, but it’s slow to manage and cumbersome to maintain. Ghost: it used to be a nice competitor to Medium, but the target audience for users no longer includes me. It’s free to self-host, but non-trivial to manage. All other self-hosted solutions (Ghost included): while I can run anything on my local systems, I don’t want to depend on my personal equipment to run my site and I don’t want to have to deal with security (although services like Ngrok and Pagekite are awesome and definitely worth your time). Cloud hosting options are a mixed bag when looking for free. You can get lots of usage out of Azure on the initial free options, but eventually you have to pay. WordPress/Drupal/etc. Will never use; will not investigate. Solution One “blog” concept that I’ve always liked is by @raganwald is his use of Github for organizing content. I have long considered this approach as it checks off a lot of boxes: Complete control Free as in latkes and free as in peaceful protests It’s git, so it’s all under control The perceived negatives I have had in the past seem to be less of an issue these days with the emergence of a few factors (some relatively new, some a bit older): Github Pages: a free static content website based on the content of a branch of your repository. Commonly the gh-pages branch, which is how this blog is served. Github Actions: Manage your updates to Github Pages automatically Github Codespaces: Everything you need to manage your site, in your browser. This is a very nice to have–you can do this anywhere/anytime already with other tools. GatsbyJs: A pretty slick static site generator based on React. Lots of extensions and pluggability. Comments: Using a tool called Utterances, which is just a convenient wrapper around Github Issues–commenting is free and easy and completely under my control. Search: This is the only 3rd party piece that I cannot take and move just anywhere, but it’s free as in pancakes for my purposes, so I’ll content with it for now and/or until I need something better. Getting There I did some basic soul googling for blog github pages -jekyll and quickly found Creating my blog with Gatsby and Github Pages, which was more than enough to get me going. I explored a variety of Gatsby Templates (once I had decided that Gatsby would meet all my needs) and I picked the Gitbook Starter template as a base. There were a variety of things I needed to change–most notably the logic for generating the sidebar tree, which required comparing the template repo with the demo repo. Most of my time was occupied fixing annoyances–I spent more than a few hours wrestling with the gh-pages module that I use for automating deploys to, you guessed it, Github Pages. The production build process for Gatsby is much slower than I would like, which is especially annoying in the early phases of development when you’re making lots of minor tweaks and changes. Combine that with trying to guarantee that I cache bust my site with new deploys, the general speed of build+deploy, local caching issues, remote caching issues–and I easily spent most of a day refreshing my browser in a state of uncertainty as to whether I was testing the right version of my code. Once I generally worked through my self-inflicted CI/CD pipeline issues, I am very satisfied with what I was able to throw together over a day and a half. Outstanding Concerns One of the fun bits of doing all this work is that it’s a beautiful combination of development work, writing and designing–all of which I love. I get to keep polishing my dev chops as I work through my backlog of blog posts to migrate as well as explore new technologies and solutions to my own little set of concerns. I’ve historically struggled to find a development problem that aligns with my personal interests, and for the first time I feel like I have the beginnings of a solution here. Still, much remains todo if I want to consider this feature complete: Add analytics so I can measure traffic. Some form of management for comments. Find alternate ways to authenticate for comments so not everyone needs to have a Github account to comment. Fix some rendering issues on page load. Tagging and other basic “bloggy” features. Migrate all my old content over. Refactor the whole thing to TypeScript, because {reasons}. Refactor the whole thing from TypeScript to Rust, because…why not? If any of this has been interesting, please let me know in the comments or in the code, which is the blog, which is the code, which…!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://crfroehlich.github.io/cellar/images/2020-10-04-blogging-to-the-oldies.jpg" /><media:content medium="image" url="https://crfroehlich.github.io/cellar/images/2020-10-04-blogging-to-the-oldies.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Work. Progress! In?</title><link href="https://crfroehlich.github.io/cellar/welcome/wip/%E1%BC%90%CE%BD%CE%BD%CE%B5%CE%B1%CE%BA%CE%B1%CE%B9%CE%B4%CE%B5%CE%BA%CE%B1%CE%B5%CF%84%CE%B7%CF%81%CE%AF%CF%82/calendar/2020/10/03/work-progress-in.html" rel="alternate" type="text/html" title="Work. Progress! In?" /><published>2020-10-03T00:00:00-05:00</published><updated>2020-10-03T00:00:00-05:00</updated><id>https://crfroehlich.github.io/cellar/welcome/wip/%E1%BC%90%CE%BD%CE%BD%CE%B5%CE%B1%CE%BA%CE%B1%CE%B9%CE%B4%CE%B5%CE%BA%CE%B1%CE%B5%CF%84%CE%B7%CF%81%CE%AF%CF%82/calendar/2020/10/03/work-progress-in</id><content type="html" xml:base="https://crfroehlich.github.io/cellar/welcome/wip/%E1%BC%90%CE%BD%CE%BD%CE%B5%CE%B1%CE%BA%CE%B1%CE%B9%CE%B4%CE%B5%CE%BA%CE%B1%CE%B5%CF%84%CE%B7%CF%81%CE%AF%CF%82/calendar/2020/10/03/work-progress-in.html">&lt;h2 id=&quot;welcome&quot;&gt;Welcome&lt;/h2&gt;

&lt;p&gt;In the late twentieth century, one man began a journey to hike his desk. This the story of the hands holding the pens writing upon the paper on the desk beneath the man behind that journey.&lt;/p&gt;

&lt;h2 id=&quot;explore&quot;&gt;Explore&lt;/h2&gt;

&lt;p&gt;The site is still under heavy &lt;i style=&quot;color: orange;&quot; class=&quot;fa fa-gear&quot;&gt;construction.&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Please bear with us as Management wrestles the reticulating splines into subservient domination.&lt;/p&gt;

&lt;p&gt;Archived blog entries are to the left, grouped by their year in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Metonic_cycle&quot;&gt;ἐννεακαιδεκαετηρίς&lt;/a&gt; cycle. For those feedsters out there, &lt;a href=&quot;/rss.xml&quot;&gt;RSS&lt;/a&gt; is available as well.&lt;/p&gt;

&lt;p&gt;The underlying source code of this blog is also exposed through the blog itself, which you can also access via the sidebar menu on the left.&lt;/p&gt;

&lt;h3 id=&quot;in-progress&quot;&gt;In progress&lt;/h3&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Comments and other bloggy-mc-blogger style features will be coming in the next of the earth’s rotations.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Visualizations&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Rebuilding the search engine&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;recommendations-for-first-time-readers&quot;&gt;Recommendations for First-Time Readers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2020/oscar&quot;&gt;a short story: Oscar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2020/blogging_to_the_oldies&quot;&gt;a more technical meta exploration of blogging: Blogging to the Oldies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-ἐννεακαιδεκαετηρίς-cycle&quot;&gt;The ἐννεακαιδεκαετηρίς Cycle&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Cycle&lt;/th&gt;
      &lt;th&gt;Year of the…&lt;/th&gt;
      &lt;th&gt;…in&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;Pie&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;2008&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;02&lt;/td&gt;
      &lt;td&gt;Scarecrow&lt;/td&gt;
      &lt;td&gt;2009&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;03&lt;/td&gt;
      &lt;td&gt;Rook&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;04&lt;/td&gt;
      &lt;td&gt;Podium&lt;/td&gt;
      &lt;td&gt;2011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;05&lt;/td&gt;
      &lt;td&gt;Honey Badger&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;06&lt;/td&gt;
      &lt;td&gt;Money&lt;/td&gt;
      &lt;td&gt;2013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;07&lt;/td&gt;
      &lt;td&gt;Coffee Pot&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;08&lt;/td&gt;
      &lt;td&gt;Mountains&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;09&lt;/td&gt;
      &lt;td&gt;Poison&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;Axe&lt;/td&gt;
      &lt;td&gt;2017&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Space Cat&lt;/td&gt;
      &lt;td&gt;2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;Scarf&lt;/td&gt;
      &lt;td&gt;2019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;Abacus&lt;/td&gt;
      &lt;td&gt;2020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;No-Fi&lt;/td&gt;
      &lt;td&gt;2021&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;Luchador&lt;/td&gt;
      &lt;td&gt;2022&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;Pi&lt;/td&gt;
      &lt;td&gt;2023&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;Pie&lt;/td&gt;
      &lt;td&gt;2024&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;01&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;2025&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>CF</name></author><category term="welcome" /><category term="wip" /><category term="ἐννεακαιδεκαετηρίς" /><category term="calendar" /><summary type="html">Welcome In the late twentieth century, one man began a journey to hike his desk. This the story of the hands holding the pens writing upon the paper on the desk beneath the man behind that journey. Explore The site is still under heavy construction.. Please bear with us as Management wrestles the reticulating splines into subservient domination. Archived blog entries are to the left, grouped by their year in the ἐννεακαιδεκαετηρίς cycle. For those feedsters out there, RSS is available as well. The underlying source code of this blog is also exposed through the blog itself, which you can also access via the sidebar menu on the left. In progress Comments and other bloggy-mc-blogger style features will be coming in the next of the earth’s rotations. Visualizations Rebuilding the search engine Recommendations for First-Time Readers a short story: Oscar a more technical meta exploration of blogging: Blogging to the Oldies The ἐννεακαιδεκαετηρίς Cycle Cycle Year of the… …in 17 Pie 2007 01 Baby 2008 02 Scarecrow 2009 03 Rook 2010 04 Podium 2011 05 Honey Badger 2012 06 Money 2013 07 Coffee Pot 2014 08 Mountains 2015 09 Poison 2016 10 Axe 2017 11 Space Cat 2018 12 Scarf 2019 13 Abacus 2020 14 No-Fi 2021 15 Luchador 2022 16 Pi 2023 17 Pie 2024 01 Baby 2025</summary></entry><entry><title type="html">Oscar</title><link href="https://crfroehlich.github.io/cellar/fiction/short%20story/2020/09/30/oscar.html" rel="alternate" type="text/html" title="Oscar" /><published>2020-09-30T00:00:00-05:00</published><updated>2020-09-30T00:00:00-05:00</updated><id>https://crfroehlich.github.io/cellar/fiction/short%20story/2020/09/30/oscar</id><content type="html" xml:base="https://crfroehlich.github.io/cellar/fiction/short%20story/2020/09/30/oscar.html">&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Words have been changed and characters rearranged to limit liability to the not guilty.    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every sixty minutes at seven minutes past the hour exactly, Oscar would run naked through the house. He always entered through the front door, streaked through the living room, raced down the hallway, dashed in and out of each room (bathrooms and closets included), ran a quick circle around the island in the kitchen and exited through the mudroom and out the garage. If the garage door were closed, Oscar would mash the button and jog in place until the door raised high enough to dart under.&lt;/p&gt;

&lt;p&gt;While Oscar’s hourly run was in and of itself perplexing, what confused us even more was that not one of us had the faintest idea who was Oscar or whence he came. Did he visit other houses on our street? The pure oddity of our visitor left us in an unusual position. Customarily, it is not appropriate to approach a stranger’s house (be it or not a neighbor’s), knock upon the door and inquire about nude persons that may or may not be running through said person’s home.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Good afternoon, ma’am. I’m your neighbor from down the street, and…”&lt;br /&gt;  &lt;br /&gt;
“Oh, yes, ma’am. Number 312, yes.”&lt;br /&gt;  &lt;br /&gt;
“I’m sure you have seen me riding down the street. Yes, ma’am.”&lt;br /&gt;  &lt;br /&gt;
“Oh, no, ma’am — we don’t even play baseball. I don’t…”&lt;br /&gt;  &lt;br /&gt;
“Yes, ma’am, I see. I am very sorry about the window, but it really wasn’t…”&lt;br /&gt;  &lt;br /&gt;
“If I may, I will ask my mother to inquire around.”&lt;br /&gt;  &lt;br /&gt;
“Yes ma’am, integrity and responsibility are very important virtues for our young people, yes. As a matter of fact, I…”&lt;br /&gt;  &lt;br /&gt;
“Of course, ma’am. I could not agree more.”&lt;br /&gt;  &lt;br /&gt;
“Ma’am, the reason I came by is to ask if you have ever seen Oscar.”&lt;br /&gt;  &lt;br /&gt;
“Well, you see, ma’am, I really do not know. I only know that he runs naked through our house every day.”&lt;br /&gt;  &lt;br /&gt;
“Heaven forbid, ma’am. This is no prank…”&lt;br /&gt;  &lt;br /&gt;
“Please, I assure you, I had no such intention…”&lt;br /&gt;  &lt;br /&gt;
“Accept my apologies; I am sorry to have disturbed you.”&lt;br /&gt;  &lt;br /&gt;
“Yes, I will have my mother…”&lt;br /&gt;  &lt;br /&gt;
“Good day ma’am.”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So you see, the question of asking about the neighborhood was itself quite out of the question. The next, most obvious approach was to try to follow Oscar and see where he went. Now, I do not know if you have ever tried to chase a naked, fully grown man with a seven foot long beard as he runs down the street in broad daylight, but the folks around here do not take kindly to it. Frankly, we didn’t much relish the idea either. It is one thing to blissfully, obliviously ignore a naked person streaking past and quite another thing entirely to try to unsee a couple of children chasing a naked, fully grown man with a seven foot beard.&lt;/p&gt;

&lt;p&gt;If we were not going to interview the neighbors and if we were not going to chase a naked, four and a half foot tall, fully grown man with a seven foot beard, then the next best thing had to be to setup a stakeout. I would watch the front door and keep a clear view up and down the street. Isaac would set up base at the top of the street and Jordan would keep watch from the bottom of the street. You will now be forgiven if you thought this a perfectly good and reasonable plan, for none of us expected to see Oscar floating gently down toward the ground, a parachute the color of the setting sun holding him aloft as his freely dangling loins taunted us with the ineffable and inscrutable ceremony of Oscar’s visit. No one expects a naked, four and a half foot tall, fully grown man with flowing red hair and a seven foot beard to parachute into their driveway, release and then run through every nook and cranny of their house. Indeed, faced with the blur of that buck naked, birthday suit clad, man coursing through our house, we were still caught by the shock of the parachute entrance to react in any significant way before Oscar was already tearing out the garage toward the end of the street. Curiously, as we watched him slowly fade into the horizon, the wind picked up and before I had a chance to snap my fingers the parachute caught the breeze and carried itself after Oscar down the street.&lt;/p&gt;

&lt;p&gt;As you might imagine, my brothers and I were most puzzled. Did Oscar always parachute down? That seemed highly improbable — surely it would take more than an hour to get back into a plane, take off, circle overhead and parachute back down again. There was only one thing for it: stay in position and wait sixty minutes. We decided to take turns at the front of the house for the next round. I drew the short straw, so the first watch was mine. At five minutes past the hour, I would blow a whistle to call my brothers out and we would all fall into position. So it was that at 7:05 in the evening, the three of us resumed our triangular formation to await Oscar. The seconds dripped off our foreheads like icicles sweating. I was focused with such intensity on my watch that the explosion in the middle of the street nearly snatched the life right out of me. At 7:06:30 the sewer lid in the middle of the street shot straight up into the air and Oscar tumbled forward in a pop-off suit. Quick as a jackrabbit, he discarded the suit into the sewer just as the cover landed perfectly back in place. Thus we were left staring at the massive, yellow smiley face tattooed on Oscar’s posterior as that naked, four and a half foot, fully grown man with flowing red hair and a seven foot beard flashed in and out of our house toward the setting sun.&lt;/p&gt;

&lt;p&gt;We had time for one more watch before darkness fell. We briefly discussed positioning a camera through the night to capture Oscar’s various entrances but just as quickly decided we had already seen enough of naked Oscar and did not need to further stain our memories with yet more images of Oscar’s pride. As before, we waited until the appointed time, and at 8:05 that evening resumed our watch in anticipation of Oscar’s return. We stood facing the street, no longer attempting to hide, standing in plain view in the middle of the driveway. Were it not for Isaac’s excellent hearing and quick wit, we might have missed Oscar’s entrance entirely. At Isaac’s signal, we swiftly turned around to face the house just in time to see Oscar release his grip on a hang glider and land nimbly on the roof, from which he performed a flawless backflip, his neatly braided armpit hair swinging like dreadlocks, landing before the front door and streaking inside.&lt;/p&gt;

&lt;p&gt;There comes a point in the day when one can take no more of a naked, four and a half foot tall, full grown man with flowing red hair, a seven foot beard, a giant smiley face butt tattoo and armpit hair dreadlocks. After all, he would be lapping through our house every hour, all night long. We had given up closing bedroom doors long ago. Oscar could pick a lock in less than a second. Deadbolts didn’t stop him. Barricading the door slowed him down not in the least. In the beginning, once it had become clear that Oscar was an unstoppable force, my parents had begun trying to solicit advice from friends and family — but try as they might, they could not find a way to broach the subject of the naked man. My parents tried hosting dinner parties in a more casual effort to allow the subject of Oscar to occur organically in conversation, but Oscar’s hourly runs would prove as frictionless as my mother’s desserts find their way from table to tummy — Oscar could loop through the house, setting foot in every room, unseen and unheard by all except we privileged few with tickets to the never ending show. Gradually, we would come to accept that Oscar’s loins were intended for an audience of us and us alone.&lt;/p&gt;

&lt;p&gt;My parents tried all the usual sorts of things that simple, hardworking, market fearing adults should try. They called the police.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Yes, officer, fourteen inch toenails painted neon green with glitter.”&lt;br /&gt;  &lt;br /&gt;
“No, officer, I assure you — this is not a joke.”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They called the city newspapers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“No, officer, I assure you — this is not a joke.”&lt;br /&gt;  &lt;br /&gt;
“Yes, tugboat earrings in both ears — quite large. The tugboats make a horn sound as he runs.”&lt;br /&gt;  &lt;br /&gt;
“Well, no, we don’t have any pictures…the man is stark naked. If you could just come by the house…”&lt;br /&gt;  &lt;br /&gt;
“What time? Any hour of the day; just be here at seven past the hour.”&lt;br /&gt;  &lt;br /&gt;
“What? Yes, of course I am serious!”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They called animal control.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Well, no, he is not technically an animal himself, but he does run with a gerbil in each hand.”&lt;br /&gt;  &lt;br /&gt;
“Well the gerbils look quite distressed!”&lt;br /&gt;  &lt;br /&gt;
“Their squeaks sound most concerned.”&lt;br /&gt;  &lt;br /&gt;
“I assure you that being swung about in the hands of a naked man is not among the things Mother Nature provisioned for a gerbil’s recreational activities.”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They called the fire department.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“No sir, nothing is burning. Yet. Not at this exact moment.”&lt;br /&gt;  &lt;br /&gt;
“Well, you see, the back of his neck, you see. Erm. His neck hairs to be precise. Well, the back of his neck is always smoking and the hairs are singed you see.”&lt;br /&gt;  &lt;br /&gt;
“Something is burning them.”&lt;br /&gt;  &lt;br /&gt;
“Well, as I said, not at this exact moment, but if you come by in just thirty minutes, I am sure you will see the smoke.”&lt;br /&gt;  &lt;br /&gt;
“No, I am not threatening to start a fire!”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They called the FBI.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I see. You’ve already heard about us, eh?”&lt;br /&gt;  &lt;br /&gt;
“Nothing you can do? Nothing at all? Can’t even take a message, eh? Would just get thrown away as soon as I hang up, you say?”&lt;br /&gt;  &lt;br /&gt;
“Would it make any difference to know that he has tiny tattoos of the Russian flag above his nipples?”  &lt;br /&gt;
“None whatsoever, eh…”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At that my father gave up hope. For a time, my mother carried on. She called the local churches, the banks, the grocery stores. She called plumbers and electricians and contractors. She called the Red Cross, Amnesty International, the UN and the WHO. I do believe she called every non-residential entity with a phone number before finally collapsing against the cold, hard, unrelenting truth: Oscar’s naughty bits were inextricably intertwined with our lives.&lt;/p&gt;

&lt;p&gt;My parents were nothing if not rational creatures, disposed to dispensing healthy portions of the scientific method at every opportunity (and to them, moments do not exist that are not opportune). Logically, if we could not rely upon anyone else, then from beneath our own bootstraps we must emerge prepared to do battle. Gods bless them, they did try so many things. If I recall correctly, my mother had the first idea: equip each of us with solar eclipse glasses and turn out the lights before Oscar’s next run. Mother handed out the glasses and we sat wrapped in the comforting embrace of darkness, eyes closed behind thick, dark lenses with the quiet evening holding vigil around us. Darkness, sweet and absolute, suddenly abandoned us without warning as the light of a thousand flares roared to raging life around the house, bringing Oscar’s frank and beans into perfect clarity and focus as he flitted gracefully, rapidly through the house. In the dark of the evenings, my father tried cutting the power to the house. Naturally, Oscar persisted, his whole body wrapped in a complex web of glow sticks. At that, my brothers and I did begin a short lived philosophical discussion on whether or no the glow sticks constituted a form of clothing; but we quickly tired of the question and are happy to defer it to consideration by future generations.&lt;/p&gt;

&lt;p&gt;Among all the curiosities that surround Oscar: his arrival, appearance and routine, the simplest to explain (and not without coincidence the first question often asked of this simple narrative) is how we came to know his name; and for this we have but Oscar to thank, for every time Oscar opened the front door, he proclaimed in a sing-song voice “Oscar’s back” with the “ack” extended in a lilting sort of way, extended but not entirely detached from the “b” of its birth — the way a mother might soothe a infant on her return: all is well, worry not, sanity and security are restored. The answers to most other questions remain shrink wrapped in enigmas: how and where does he sleep? Does he have a family? What does he do each hour for the 58½ minutes not spent inside our house? How does he keep this up, every single hour of every single day for months if not years on end? What happens when he gets sick? Has he ever been late? Where did he come from? And why? Why? Why — by the unwritten, sacred names of all the unspoken holiness around us — why?&lt;/p&gt;

&lt;p&gt;As it does, time passed. Like a sudden burst of sunlight severing the grip of an icicle from the roof, an idea smashed into my consciousness with the same abruptness as Oscar bursting through the doorway: why not ask him? For reasons that will soon clarify as they crystalize: attempting to start a conversation with Oscar proved slightly more difficult than my confidence in the idea suggested. One Saturday morning, as Oscar entered the living room, I braced myself for the unthinkable and managed to release a whispery “Are you hungry?”, which only barely managed to escape my lips before Oscar reached the garage. Each conversation felt as a stained glass window being assembled from its shattered fragments. Our first dialog differed little from the rest except insofar as it was the end of the evitable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;06:07 — Are you hungry?&lt;br /&gt;  &lt;br /&gt;
07:07 — Yep.&lt;br /&gt;  &lt;br /&gt;
08:07 — Would you like a sandwich?&lt;br /&gt;  &lt;br /&gt;
09:07 — Please.&lt;br /&gt;  &lt;br /&gt;
10:07 — What kind of sandwich?&lt;br /&gt;  &lt;br /&gt;
11:07 — Tuna…&lt;br /&gt;  &lt;br /&gt;
12:07 — …fish…&lt;br /&gt;  &lt;br /&gt;
13:07 — …no…&lt;br /&gt;  &lt;br /&gt;
14:07 — …pickles.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At 3:07 in the afternoon, a tuna fish sandwich, on toasted rye bread, lounged upon the kitchen counter, waiting with a diagonal come hither slice down the middle for Oscar to return. Oscar took the sandwich and at 4:07 said “Thanks” as he passed. From that day forward, I left a tuna sandwich on the kitchen counter in the afternoons. Our conversations continued, Oscar replying a word or two per hour.&lt;/p&gt;

&lt;p&gt;I asked:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Do you enjoy this?”&lt;br /&gt;  &lt;br /&gt;
“This is…”&lt;br /&gt;  &lt;br /&gt;
“…the job…”&lt;br /&gt;  &lt;br /&gt;
“…I was…”&lt;br /&gt;  &lt;br /&gt;
“…born…”&lt;br /&gt;  &lt;br /&gt;
“…to do.”&lt;br /&gt;  &lt;br /&gt;
“Is the pay good?”&lt;br /&gt;  &lt;br /&gt;
“Decent…”&lt;br /&gt;  &lt;br /&gt;
“…Has per diem…”&lt;br /&gt;  &lt;br /&gt;
“…Benefits…”&lt;br /&gt;  &lt;br /&gt;
“…Travel.”&lt;br /&gt;  &lt;br /&gt;
“When did you start?”&lt;br /&gt;  &lt;br /&gt;
“A few…”&lt;br /&gt;  &lt;br /&gt;
“…years ago.”&lt;br /&gt;  &lt;br /&gt;
“What made you get into this line of work?”&lt;br /&gt;  &lt;br /&gt;
“Great…”&lt;br /&gt;  &lt;br /&gt;
“…exercise…”&lt;br /&gt;  &lt;br /&gt;
“…Meet new…”&lt;br /&gt;  &lt;br /&gt;
“…people…”&lt;br /&gt;  &lt;br /&gt;
“…See new…”&lt;br /&gt;  &lt;br /&gt;
“…places.”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the conversations went for days or weeks, until (quite unexpectedly) I stumbled upon the question I should have asked at the very beginning. “So. Um. Oscar? So, why our house?” I paused, “I mean, this is great and all — don’t get me wrong — the gerbils really close the deal…but why choose to do this in our home?”&lt;/p&gt;

&lt;p&gt;Oscar skidded to a halt in mid stride. He turned to face me and walked slowly into the living room. “Eh,” he said, “Sorry. Say that one more time?” “Well,” I started, “I mean, of all the houses in all the world, why ours?” Oscar scratched his head for a moment, his red hair somehow still flowing, “Why. Hrm. Yes, why, indeed.” From where I cannot imagine, Oscar produced a thick stack of papers. “Let’s see,” he started, thumbing through the papers, “Kilpatricks. 312 Maple. Full service package. Ordered on February 2nd. Full year, paid in advance.” He looked up at me, “This is 312 Maple. You are the Kilpatricks, right?” “Oh, no” I said, “You want 313, just across the street.”&lt;/p&gt;

&lt;p&gt;Inside a blur of motion, Oscar had a phone in his hand and he was furiously tapping away at the screen. He lifted the phone to his ear.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Jimmy, Oscar here. Looks like corporate screwed up again.”&lt;br /&gt;  &lt;br /&gt;
“Yeah, the DF-10.75 package with full service add-on. Yeah, it’s 313 Maple.”&lt;br /&gt;  &lt;br /&gt;
“Right, send the usual cleanup crew.”&lt;br /&gt;  &lt;br /&gt;
“Ok. I’ll update the protocol.”&lt;br /&gt;  &lt;br /&gt;
“Sounds good. I’ll start on them first thing tomorrow.”&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At that, Oscar hung up and the phone vanished as quickly as it had appeared. He flipped through the paperwork, located a page and held that with one hand while the other produced a tongue depressor in a sterile package, “Lick that and swab here please,” he said to me. Dazed, I unwrapped the small wooden device from the plastic, gave it a lick and spread the ooze on the form where he indicated. “I’m very sorry about all of this,” Oscar said as the paperwork and tongue depressor vanished. “You know how corporate gets sometimes. Mistakes happen. Big wigs don’t think like the little wigs, and so on.” Oscar looked around, almost with a hint of sadness — though it was difficult to interpret his emotions behind the layers of clown makeup on his face. “Again, so terribly sorry about all of this. Corporate will be in touch to tidy things up here, hog tie any loose ends, wrangle any problems, etcetera.” Oscar walked toward the front door and said without looking back, “Well, good luck with…well, whatever it is you people do here.” He was gone, and I have never seen him since.&lt;/p&gt;

&lt;p&gt;My mother walked into the living room later that evening and observed me — I must have looked glazed over, sitting on the couch and staring at the wall. “What happened dear?” she asked. “I have no idea. I mean, Oscar’s gone. Seems he won’t be back. Something about a wrong address. I had to lick some paperwork. I guess he wanted the Kilpatricks from across the street.” The color fell off my mother’s face like a mortar dropping toward the earth, “The Kilpatricks moved away months ago, dear. A new family just moved in last week.”&lt;/p&gt;

&lt;p&gt;“Oh. Oh, dear my. Oh dear,” I said. “Should we…? Should we, you know, say something?”&lt;/p&gt;

&lt;p&gt;My mother mused for a moment before slowly composing herself and turning toward the kitchen, “No…No, I think it’s best they figure this out for themselves.”&lt;/p&gt;</content><author><name>CF</name></author><category term="fiction" /><category term="short story" /><summary type="html">Words have been changed and characters rearranged to limit liability to the not guilty. Every sixty minutes at seven minutes past the hour exactly, Oscar would run naked through the house. He always entered through the front door, streaked through the living room, raced down the hallway, dashed in and out of each room (bathrooms and closets included), ran a quick circle around the island in the kitchen and exited through the mudroom and out the garage. If the garage door were closed, Oscar would mash the button and jog in place until the door raised high enough to dart under. While Oscar’s hourly run was in and of itself perplexing, what confused us even more was that not one of us had the faintest idea who was Oscar or whence he came. Did he visit other houses on our street? The pure oddity of our visitor left us in an unusual position. Customarily, it is not appropriate to approach a stranger’s house (be it or not a neighbor’s), knock upon the door and inquire about nude persons that may or may not be running through said person’s home. “Good afternoon, ma’am. I’m your neighbor from down the street, and…” “Oh, yes, ma’am. Number 312, yes.” “I’m sure you have seen me riding down the street. Yes, ma’am.” “Oh, no, ma’am — we don’t even play baseball. I don’t…” “Yes, ma’am, I see. I am very sorry about the window, but it really wasn’t…” “If I may, I will ask my mother to inquire around.” “Yes ma’am, integrity and responsibility are very important virtues for our young people, yes. As a matter of fact, I…” “Of course, ma’am. I could not agree more.” “Ma’am, the reason I came by is to ask if you have ever seen Oscar.” “Well, you see, ma’am, I really do not know. I only know that he runs naked through our house every day.” “Heaven forbid, ma’am. This is no prank…” “Please, I assure you, I had no such intention…” “Accept my apologies; I am sorry to have disturbed you.” “Yes, I will have my mother…” “Good day ma’am.” So you see, the question of asking about the neighborhood was itself quite out of the question. The next, most obvious approach was to try to follow Oscar and see where he went. Now, I do not know if you have ever tried to chase a naked, fully grown man with a seven foot long beard as he runs down the street in broad daylight, but the folks around here do not take kindly to it. Frankly, we didn’t much relish the idea either. It is one thing to blissfully, obliviously ignore a naked person streaking past and quite another thing entirely to try to unsee a couple of children chasing a naked, fully grown man with a seven foot beard. If we were not going to interview the neighbors and if we were not going to chase a naked, four and a half foot tall, fully grown man with a seven foot beard, then the next best thing had to be to setup a stakeout. I would watch the front door and keep a clear view up and down the street. Isaac would set up base at the top of the street and Jordan would keep watch from the bottom of the street. You will now be forgiven if you thought this a perfectly good and reasonable plan, for none of us expected to see Oscar floating gently down toward the ground, a parachute the color of the setting sun holding him aloft as his freely dangling loins taunted us with the ineffable and inscrutable ceremony of Oscar’s visit. No one expects a naked, four and a half foot tall, fully grown man with flowing red hair and a seven foot beard to parachute into their driveway, release and then run through every nook and cranny of their house. Indeed, faced with the blur of that buck naked, birthday suit clad, man coursing through our house, we were still caught by the shock of the parachute entrance to react in any significant way before Oscar was already tearing out the garage toward the end of the street. Curiously, as we watched him slowly fade into the horizon, the wind picked up and before I had a chance to snap my fingers the parachute caught the breeze and carried itself after Oscar down the street. As you might imagine, my brothers and I were most puzzled. Did Oscar always parachute down? That seemed highly improbable — surely it would take more than an hour to get back into a plane, take off, circle overhead and parachute back down again. There was only one thing for it: stay in position and wait sixty minutes. We decided to take turns at the front of the house for the next round. I drew the short straw, so the first watch was mine. At five minutes past the hour, I would blow a whistle to call my brothers out and we would all fall into position. So it was that at 7:05 in the evening, the three of us resumed our triangular formation to await Oscar. The seconds dripped off our foreheads like icicles sweating. I was focused with such intensity on my watch that the explosion in the middle of the street nearly snatched the life right out of me. At 7:06:30 the sewer lid in the middle of the street shot straight up into the air and Oscar tumbled forward in a pop-off suit. Quick as a jackrabbit, he discarded the suit into the sewer just as the cover landed perfectly back in place. Thus we were left staring at the massive, yellow smiley face tattooed on Oscar’s posterior as that naked, four and a half foot, fully grown man with flowing red hair and a seven foot beard flashed in and out of our house toward the setting sun. We had time for one more watch before darkness fell. We briefly discussed positioning a camera through the night to capture Oscar’s various entrances but just as quickly decided we had already seen enough of naked Oscar and did not need to further stain our memories with yet more images of Oscar’s pride. As before, we waited until the appointed time, and at 8:05 that evening resumed our watch in anticipation of Oscar’s return. We stood facing the street, no longer attempting to hide, standing in plain view in the middle of the driveway. Were it not for Isaac’s excellent hearing and quick wit, we might have missed Oscar’s entrance entirely. At Isaac’s signal, we swiftly turned around to face the house just in time to see Oscar release his grip on a hang glider and land nimbly on the roof, from which he performed a flawless backflip, his neatly braided armpit hair swinging like dreadlocks, landing before the front door and streaking inside. There comes a point in the day when one can take no more of a naked, four and a half foot tall, full grown man with flowing red hair, a seven foot beard, a giant smiley face butt tattoo and armpit hair dreadlocks. After all, he would be lapping through our house every hour, all night long. We had given up closing bedroom doors long ago. Oscar could pick a lock in less than a second. Deadbolts didn’t stop him. Barricading the door slowed him down not in the least. In the beginning, once it had become clear that Oscar was an unstoppable force, my parents had begun trying to solicit advice from friends and family — but try as they might, they could not find a way to broach the subject of the naked man. My parents tried hosting dinner parties in a more casual effort to allow the subject of Oscar to occur organically in conversation, but Oscar’s hourly runs would prove as frictionless as my mother’s desserts find their way from table to tummy — Oscar could loop through the house, setting foot in every room, unseen and unheard by all except we privileged few with tickets to the never ending show. Gradually, we would come to accept that Oscar’s loins were intended for an audience of us and us alone. My parents tried all the usual sorts of things that simple, hardworking, market fearing adults should try. They called the police. “Yes, officer, fourteen inch toenails painted neon green with glitter.” “No, officer, I assure you — this is not a joke.” They called the city newspapers. “No, officer, I assure you — this is not a joke.” “Yes, tugboat earrings in both ears — quite large. The tugboats make a horn sound as he runs.” “Well, no, we don’t have any pictures…the man is stark naked. If you could just come by the house…” “What time? Any hour of the day; just be here at seven past the hour.” “What? Yes, of course I am serious!” They called animal control. “Well, no, he is not technically an animal himself, but he does run with a gerbil in each hand.” “Well the gerbils look quite distressed!” “Their squeaks sound most concerned.” “I assure you that being swung about in the hands of a naked man is not among the things Mother Nature provisioned for a gerbil’s recreational activities.” They called the fire department. “No sir, nothing is burning. Yet. Not at this exact moment.” “Well, you see, the back of his neck, you see. Erm. His neck hairs to be precise. Well, the back of his neck is always smoking and the hairs are singed you see.” “Something is burning them.” “Well, as I said, not at this exact moment, but if you come by in just thirty minutes, I am sure you will see the smoke.” “No, I am not threatening to start a fire!” They called the FBI. “I see. You’ve already heard about us, eh?” “Nothing you can do? Nothing at all? Can’t even take a message, eh? Would just get thrown away as soon as I hang up, you say?” “Would it make any difference to know that he has tiny tattoos of the Russian flag above his nipples?” “None whatsoever, eh…” At that my father gave up hope. For a time, my mother carried on. She called the local churches, the banks, the grocery stores. She called plumbers and electricians and contractors. She called the Red Cross, Amnesty International, the UN and the WHO. I do believe she called every non-residential entity with a phone number before finally collapsing against the cold, hard, unrelenting truth: Oscar’s naughty bits were inextricably intertwined with our lives. My parents were nothing if not rational creatures, disposed to dispensing healthy portions of the scientific method at every opportunity (and to them, moments do not exist that are not opportune). Logically, if we could not rely upon anyone else, then from beneath our own bootstraps we must emerge prepared to do battle. Gods bless them, they did try so many things. If I recall correctly, my mother had the first idea: equip each of us with solar eclipse glasses and turn out the lights before Oscar’s next run. Mother handed out the glasses and we sat wrapped in the comforting embrace of darkness, eyes closed behind thick, dark lenses with the quiet evening holding vigil around us. Darkness, sweet and absolute, suddenly abandoned us without warning as the light of a thousand flares roared to raging life around the house, bringing Oscar’s frank and beans into perfect clarity and focus as he flitted gracefully, rapidly through the house. In the dark of the evenings, my father tried cutting the power to the house. Naturally, Oscar persisted, his whole body wrapped in a complex web of glow sticks. At that, my brothers and I did begin a short lived philosophical discussion on whether or no the glow sticks constituted a form of clothing; but we quickly tired of the question and are happy to defer it to consideration by future generations. Among all the curiosities that surround Oscar: his arrival, appearance and routine, the simplest to explain (and not without coincidence the first question often asked of this simple narrative) is how we came to know his name; and for this we have but Oscar to thank, for every time Oscar opened the front door, he proclaimed in a sing-song voice “Oscar’s back” with the “ack” extended in a lilting sort of way, extended but not entirely detached from the “b” of its birth — the way a mother might soothe a infant on her return: all is well, worry not, sanity and security are restored. The answers to most other questions remain shrink wrapped in enigmas: how and where does he sleep? Does he have a family? What does he do each hour for the 58½ minutes not spent inside our house? How does he keep this up, every single hour of every single day for months if not years on end? What happens when he gets sick? Has he ever been late? Where did he come from? And why? Why? Why — by the unwritten, sacred names of all the unspoken holiness around us — why? As it does, time passed. Like a sudden burst of sunlight severing the grip of an icicle from the roof, an idea smashed into my consciousness with the same abruptness as Oscar bursting through the doorway: why not ask him? For reasons that will soon clarify as they crystalize: attempting to start a conversation with Oscar proved slightly more difficult than my confidence in the idea suggested. One Saturday morning, as Oscar entered the living room, I braced myself for the unthinkable and managed to release a whispery “Are you hungry?”, which only barely managed to escape my lips before Oscar reached the garage. Each conversation felt as a stained glass window being assembled from its shattered fragments. Our first dialog differed little from the rest except insofar as it was the end of the evitable. 06:07 — Are you hungry? 07:07 — Yep. 08:07 — Would you like a sandwich? 09:07 — Please. 10:07 — What kind of sandwich? 11:07 — Tuna… 12:07 — …fish… 13:07 — …no… 14:07 — …pickles. At 3:07 in the afternoon, a tuna fish sandwich, on toasted rye bread, lounged upon the kitchen counter, waiting with a diagonal come hither slice down the middle for Oscar to return. Oscar took the sandwich and at 4:07 said “Thanks” as he passed. From that day forward, I left a tuna sandwich on the kitchen counter in the afternoons. Our conversations continued, Oscar replying a word or two per hour. I asked: “Do you enjoy this?” “This is…” “…the job…” “…I was…” “…born…” “…to do.” “Is the pay good?” “Decent…” “…Has per diem…” “…Benefits…” “…Travel.” “When did you start?” “A few…” “…years ago.” “What made you get into this line of work?” “Great…” “…exercise…” “…Meet new…” “…people…” “…See new…” “…places.” So the conversations went for days or weeks, until (quite unexpectedly) I stumbled upon the question I should have asked at the very beginning. “So. Um. Oscar? So, why our house?” I paused, “I mean, this is great and all — don’t get me wrong — the gerbils really close the deal…but why choose to do this in our home?” Oscar skidded to a halt in mid stride. He turned to face me and walked slowly into the living room. “Eh,” he said, “Sorry. Say that one more time?” “Well,” I started, “I mean, of all the houses in all the world, why ours?” Oscar scratched his head for a moment, his red hair somehow still flowing, “Why. Hrm. Yes, why, indeed.” From where I cannot imagine, Oscar produced a thick stack of papers. “Let’s see,” he started, thumbing through the papers, “Kilpatricks. 312 Maple. Full service package. Ordered on February 2nd. Full year, paid in advance.” He looked up at me, “This is 312 Maple. You are the Kilpatricks, right?” “Oh, no” I said, “You want 313, just across the street.” Inside a blur of motion, Oscar had a phone in his hand and he was furiously tapping away at the screen. He lifted the phone to his ear. “Jimmy, Oscar here. Looks like corporate screwed up again.” “Yeah, the DF-10.75 package with full service add-on. Yeah, it’s 313 Maple.” “Right, send the usual cleanup crew.” “Ok. I’ll update the protocol.” “Sounds good. I’ll start on them first thing tomorrow.” At that, Oscar hung up and the phone vanished as quickly as it had appeared. He flipped through the paperwork, located a page and held that with one hand while the other produced a tongue depressor in a sterile package, “Lick that and swab here please,” he said to me. Dazed, I unwrapped the small wooden device from the plastic, gave it a lick and spread the ooze on the form where he indicated. “I’m very sorry about all of this,” Oscar said as the paperwork and tongue depressor vanished. “You know how corporate gets sometimes. Mistakes happen. Big wigs don’t think like the little wigs, and so on.” Oscar looked around, almost with a hint of sadness — though it was difficult to interpret his emotions behind the layers of clown makeup on his face. “Again, so terribly sorry about all of this. Corporate will be in touch to tidy things up here, hog tie any loose ends, wrangle any problems, etcetera.” Oscar walked toward the front door and said without looking back, “Well, good luck with…well, whatever it is you people do here.” He was gone, and I have never seen him since. My mother walked into the living room later that evening and observed me — I must have looked glazed over, sitting on the couch and staring at the wall. “What happened dear?” she asked. “I have no idea. I mean, Oscar’s gone. Seems he won’t be back. Something about a wrong address. I had to lick some paperwork. I guess he wanted the Kilpatricks from across the street.” The color fell off my mother’s face like a mortar dropping toward the earth, “The Kilpatricks moved away months ago, dear. A new family just moved in last week.” “Oh. Oh, dear my. Oh dear,” I said. “Should we…? Should we, you know, say something?” My mother mused for a moment before slowly composing herself and turning toward the kitchen, “No…No, I think it’s best they figure this out for themselves.”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://crfroehlich.github.io/cellar/images/2020-09-30-oscar.png" /><media:content medium="image" url="https://crfroehlich.github.io/cellar/images/2020-09-30-oscar.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Code Generation Fail: An all the king’s horses tragedy</title><link href="https://crfroehlich.github.io/cellar/metadata/retrospective/code/generation/2019/07/10/code-generation-fail-an-all-the-kings-horses-tragedy.html" rel="alternate" type="text/html" title="Code Generation Fail: An all the king’s horses tragedy" /><published>2019-07-10T00:00:00-05:00</published><updated>2019-07-10T00:00:00-05:00</updated><id>https://crfroehlich.github.io/cellar/metadata/retrospective/code/generation/2019/07/10/code-generation-fail-an-all-the-kings-horses-tragedy</id><content type="html" xml:base="https://crfroehlich.github.io/cellar/metadata/retrospective/code/generation/2019/07/10/code-generation-fail-an-all-the-kings-horses-tragedy.html">&lt;p&gt;Sometimes best intentions and good ole fashioned elbow grease are no match against the tyrannical fist of Reality. In my &lt;a href=&quot;https://blog.luddites.me/2019/Code-Generation--Connecting-T4-to-Entity-Framework-Core&quot;&gt;previous post&lt;/a&gt;, I discussed some of the initial ambitions and achievements in my attempt to convert the Entity Framework Core + MVC project into a dynamically generated template using T4. The good news? T4 is a perfectly adequate way to generate code from templates. The bad news? There is no way to make this completely integrated in a pure .NET Core project. What does this mean, and why is this a problem?&lt;/p&gt;

&lt;h3 id=&quot;the-story&quot;&gt;The Story&lt;/h3&gt;

&lt;p&gt;Full disclosure: if you want something approximating a tldr; just skip to the next section.&lt;/p&gt;

&lt;p&gt;For starters, the beauty of .NET Core is that I can compile and run a .NET Core app as easily on my Pixelbook as I can on my Windows devices. Getting a Core app up and running is just a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet build&lt;/code&gt; away! This simplicity is bruised, battered and beaten when we can’t run the transforms required to generate that code. In an ideal world, when I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet build&lt;/code&gt; on the &lt;a href=&quot;https://github.com/crfroehlich/autoEcMvc&quot;&gt;AutoEcMvc&lt;/a&gt; solution, the CodeGeneration project would compile and output the generated code into the AutoEcMvc project, which would then compile.&lt;/p&gt;

&lt;p&gt;If this worked, the project could then drop seamlessly into Azure Pipelines which would automatically compile, test and deploy the project to my Azure app container! (It should be noted, I can still make this work, but it’s extra work that should be unnecessary).&lt;/p&gt;

&lt;p&gt;Before I dive into the full autopsy of the deceased dream, I’ll explain my temporary solution and a few alternatives that I considered. For reasons that I’ll explain momentarily, the only way for even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msbuild&lt;/code&gt; to work with a T4 project is to base the project on .NET Framework. In order to keep the T4 free from compilation issues (because Text Transformation happens &lt;em&gt;before&lt;/em&gt; build, you can find yourself in a situation where the solution cannot compile without some minor hacking), I find it useful to keep the C# backing code for the templates in its own project. Unfortunately, the minimum project type that will work is .NET Standard (.NET Framework will also work, but the goal is to get as close to .NET Core as possible). For these reasons, my current solution’s solution has three projects, in build order: CodeGeneration (.NET Standard) &amp;gt; T4 (.NET Framework) &amp;gt; AutoEcMvc (.NET Core). CodeGeneration has only the utility functions required for the T4 project, which has only the metadata JSON and TT files, and AutoEcMvc has the user defined and generated content together. In another chapter, we’ll remove generated code from source control entirely, but for now I’m leaving it in place as a way to easily review and compare changes with the original project.&lt;/p&gt;

&lt;p&gt;With this configuration, msbuild works seamlessly and I’ll update my Azure Pipeline to use msbuild and get my CI/CD plans back on track. I’m less than thrilled with having to throw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet build&lt;/code&gt; under the bus, but I’ve also spent more hours trying to crack this nut than I want — and I have whales need fryin’.&lt;/p&gt;

&lt;p&gt;Before I completely abandoned the dream of a pure .NET Core solution, I explored a few options. There is &lt;a href=&quot;https://github.com/daveaglick/Scripty&quot;&gt;Scripty&lt;/a&gt;, which “lets you use Roslyn-powered C# scripts for code generation. You can think of it as a scripted alternative to T4 templates.” While it sounds promising, the project hasn’t been updated in a while and seems to have outstanding issues with .NET Core. There is also the issue of documentation — any &lt;a href=&quot;https://github.com/daveaglick/Scripty/issues/104&quot;&gt;examples&lt;/a&gt; of converting a T4 template to Scripty would be enormously helpful. Another promising option was &lt;a href=&quot;https://github.com/atifaziz/t5&quot;&gt;T5&lt;/a&gt;, but no amount of tinkering prevailed against the ineffable and inscrutable refusal from Core to comply. Finally, there is &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/page?view=aspnetcore-2.2&amp;amp;tabs=visual-studio&quot;&gt;scaffolding&lt;/a&gt; built into ASP.NET Core, but this is specific to Razor pages and not really a way to keep generated code in sync with metadata in the way I want to use it.&lt;/p&gt;

&lt;p&gt;Absent other ideas, T4 still seems like the best approach without a major rewrite. I should note, my specific use of T4 is not terribly complicated, and it would be easy to ditch the templates altogether and simply write the code entirely in C#, but then it would cease to be generic and defeat the purpose of this little exercise. I may emerge from this experiment with a different opinion, but for now I’ll assume that T4 will remain the backbone of the project (until proven differently).&lt;/p&gt;

&lt;p&gt;As always, this has been a long winded series of asides, a slow and drifting detour from the main point: T4 and .NET Core do not mix. The latter does not abide the former. There is hostility, vitriol and threats of malice aforethought between the two. How do I know this?&lt;/p&gt;

&lt;h3 id=&quot;my-current-solution&quot;&gt;My Current “Solution”&lt;/h3&gt;

&lt;p&gt;To understand the problems with trying to migrate T4 into .NET Core, I think it useful to explain the challenges presented in .NET Framework. There are two paths to text transformation.&lt;/p&gt;

&lt;p&gt;The first is a developer convenience baked directly into Visual Studio since at least 2015. When you add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tt&lt;/code&gt; file into a project, VS immediately recognizes the template and offers a few convenience options for you as a developer: (1) whenever you save changes to the template, VS immediately runs text transform and the output is regenerated, (2) VS gives context menu options to manually transform (aka Run Custom Tool) and to debug the template, which will launch the debugger and allow you to set breakpoints anywhere, and (3) VS offers the option to run all transforms at the project/solution level. All of these features are hugely beneficial to the development of templates. But. And this is a big “but”.&lt;/p&gt;

&lt;p&gt;The second is through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msbuild&lt;/code&gt; which is what I would normally use in my CI pipeline. Msbuild launches text transform in a different context than VS, which means that the relative paths (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(SolutionDir)&lt;/code&gt; )that work in VS no longer work from msbuild.&lt;/p&gt;

&lt;p&gt;In order to reconcile the two different behaviors, we need to make some changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; file. Unfortunately, a project using .NET Framework has to be unloaded to be edited, then reloaded. Personally, I edit the project file directly in VS Code and let VS trigger the reload warning after I save changes. This is tedious, but it eliminates a few right-clicks.&lt;/p&gt;

&lt;p&gt;If we start with a &lt;a href=&quot;https://github.com/crfroehlich/AutoEcMvc/blob/master/T4/templates/imports.ttinclude&quot;&gt;T4 import&lt;/a&gt; that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-t4&quot;&gt;#&amp;gt;&amp;lt;#@ assembly name=&quot;$(SolutionDir)CodeGeneration\\bin\\netstandard2.0\\CodeGeneration.Dll&quot;    
#&amp;gt;&amp;lt;#@ assembly name=&quot;$(SolutionDir)CodeGeneration\\bin\\netstandard2.0\\Newtonsoft.Json.Dll&quot;    
#&amp;gt;&amp;lt;#@ import namespace=&quot;Newtonsoft.Json&quot;    
#&amp;gt;&amp;lt;#@ import namespace=&quot;Newtonsoft.Json.Linq&quot;    
#&amp;gt;&amp;lt;#@ import namespace=&quot;CodeGeneration&quot; #&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we have two immediate problems. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(SolutionDir)&lt;/code&gt; cannot resolve outside of VS, and our 3rd party dependency on Newtonsoft will not be available from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin&lt;/code&gt; directory. Starting with the latter, you can add this into a property group in the project file:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;CopyLocalLockFileAssemblies&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CopyLocalLockFileAssemblies&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, all reference binaries will be copied into the build output directory.&lt;/p&gt;

&lt;p&gt;Next, the challenge of resolving the path to that output directory can be solved as well. A custom mapping is required, which is also possible with a little XML markup:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetFolder&amp;gt;&lt;/span&gt;$(MSBuildProjectDirectory)\\..\\CodeGeneration\\bin\\netstandard2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/targetFolder&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;T4ParameterValues&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;targetFolder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Value&amp;gt;&lt;/span&gt;$(targetFolder)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Value&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/T4ParameterValues&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, I can update the T4 imports to:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#&amp;gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;#@ assembly name=&quot;$(targetFolder)\\CodeGeneration.Dll&quot;    
#&amp;gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;#@ assembly name=&quot;$(targetFolder)\\Newtonsoft.Json.Dll&quot;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this will work seamlessly between VS and msbuild. There are a few other changes to make, but these are much more clearly documented elsewhere. For reference here, you also need:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Import&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Project=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$(MSBuildToolsPath)\\Microsoft.CSharp.targets&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Get the Visual Studio version: --&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;VisualStudioVersion&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'$(VisualStudioVersion)' == ''&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;16.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VisualStudioVersion&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Keep the next element all on one line: --&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;VSToolsPath&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'$(VSToolsPath)' == ''&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VSToolsPath&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This is the important line: --&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Import&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Project=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;TransformOnBuild&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TransformOnBuild&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;OverwriteReadOnlyOutputFiles&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/OverwriteReadOnlyOutputFiles&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;TransformOutOfDateOnly&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TransformOutOfDateOnly&amp;gt;&lt;/span&gt;    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;RunPostBuildEvent&amp;gt;&lt;/span&gt;Always&lt;span class=&quot;nt&quot;&gt;&amp;lt;/RunPostBuildEvent&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the final glue to ensure that you get identical behavior when compiling the project from any direction.&lt;/p&gt;

&lt;p&gt;Once all these pieces are in place, msbuild should &lt;strong&gt;just work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/modeling/t4-parameter-directive?view=vs-2019&quot;&gt;T4 Parameter Directive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-in-a-build-process?view=vs-2019#parameters&quot;&gt;Pass build context data into the templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/clariuslabs/TransformOnBuild&quot;&gt;TransformOnBuild&lt;/a&gt; (I didn’t end up using this solution, but exploring the project helped me resolve some issues)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;my-struggle&quot;&gt;My Struggle&lt;/h3&gt;

&lt;p&gt;The next time I run into this class of problem, I definitely want to track all of my uncommitted changes and correlate each attempted fix with the relevant errors that occur which drive me to all the URLs and searches for answers as I attempt each new iteration of the fix. Then, ideally, I could blog about each stage of the journey with a little more coherence. For now and for the sake of the reader, I will simply list all of the relevant bits (that I can find in my browser history) that have led me to the conclusion that (as of this moment) T4 and Core cannot coexist.&lt;/p&gt;

&lt;p&gt;Incomplete Solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mono/t4&quot;&gt;Re-implementation of T4 in Mono&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notquitepure.info/2018/12/12/T4-Templates-at-Build-Time-With-Dotnet-Core/&quot;&gt;T4 Templates at Build Time with Dotnet Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=TimMaes.ttexecuter&quot;&gt;T4Executer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Relevant GitHub Issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarin/TorchSharp/issues/27&quot;&gt;dotnet build fails to generate TypeGeneration.cs on linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mono/t4/issues/12&quot;&gt;Add MSBuild targets package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/core/issues/2743&quot;&gt;Several FileNotFoundException using Newtonsoft.Json inside T4 template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/core/issues/2000&quot;&gt;FileNotFoundException (System.Runtime, Version=4.2.1.0) when reflecting in T4 template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nil4/dotnet-transform-xdt/issues/16&quot;&gt;Package type ‘DotnetCliTool’ is not supported by project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mono/t4/issues/42&quot;&gt;PlatformNotSupportedException with dotnet-t4-project-tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet-websharper/core/issues/903&quot;&gt;build failing — and what worked for me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Relevant StackOverflow Issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17170080/t4-subtemplates-transformtext-not-working&quot;&gt;T4 subtemplates TransformText() not working&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/47691299/texttemplating-target-in-a-net-core-project&quot;&gt;TextTemplating target in a .Net Core project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/50471751/the-imported-project-c-program-files-dotnet-sdk-2-1-201-microsoft-visualstudio&quot;&gt;The imported project “C:\Program Files\dotnet\sdk\2.1.201\Microsoft\VisualStudio\v15.0\WebApplications\Microsoft.WebApplication.targets” was not found&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Microsoft Docs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.texttemplating.texttransformation?view=visualstudiosdk-2019&quot;&gt;TextTransformation Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developercommunity.visualstudio.com/idea/535990/filenotfoundexception-systemruntime-version4210-wh.html&quot;&gt;FileNotFoundException (System.Runtime, Version=4.2.1.0) when reflecting in T4 template in .NET Core 2.1 app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, I hope this has helped someone with a similar quest. Please feel free to correct anything I have missed, suggest corrections or alternatives, or otherwise reach out to collaborate on solutions for this journey.&lt;/p&gt;</content><author><name>CF</name></author><category term="metadata" /><category term="retrospective" /><category term="code" /><category term="generation" /><summary type="html">Sometimes best intentions and good ole fashioned elbow grease are no match against the tyrannical fist of Reality. In my previous post, I discussed some of the initial ambitions and achievements in my attempt to convert the Entity Framework Core + MVC project into a dynamically generated template using T4. The good news? T4 is a perfectly adequate way to generate code from templates. The bad news? There is no way to make this completely integrated in a pure .NET Core project. What does this mean, and why is this a problem? The Story Full disclosure: if you want something approximating a tldr; just skip to the next section. For starters, the beauty of .NET Core is that I can compile and run a .NET Core app as easily on my Pixelbook as I can on my Windows devices. Getting a Core app up and running is just a git clone and dotnet build away! This simplicity is bruised, battered and beaten when we can’t run the transforms required to generate that code. In an ideal world, when I run dotnet build on the AutoEcMvc solution, the CodeGeneration project would compile and output the generated code into the AutoEcMvc project, which would then compile. If this worked, the project could then drop seamlessly into Azure Pipelines which would automatically compile, test and deploy the project to my Azure app container! (It should be noted, I can still make this work, but it’s extra work that should be unnecessary). Before I dive into the full autopsy of the deceased dream, I’ll explain my temporary solution and a few alternatives that I considered. For reasons that I’ll explain momentarily, the only way for even msbuild to work with a T4 project is to base the project on .NET Framework. In order to keep the T4 free from compilation issues (because Text Transformation happens before build, you can find yourself in a situation where the solution cannot compile without some minor hacking), I find it useful to keep the C# backing code for the templates in its own project. Unfortunately, the minimum project type that will work is .NET Standard (.NET Framework will also work, but the goal is to get as close to .NET Core as possible). For these reasons, my current solution’s solution has three projects, in build order: CodeGeneration (.NET Standard) &amp;gt; T4 (.NET Framework) &amp;gt; AutoEcMvc (.NET Core). CodeGeneration has only the utility functions required for the T4 project, which has only the metadata JSON and TT files, and AutoEcMvc has the user defined and generated content together. In another chapter, we’ll remove generated code from source control entirely, but for now I’m leaving it in place as a way to easily review and compare changes with the original project. With this configuration, msbuild works seamlessly and I’ll update my Azure Pipeline to use msbuild and get my CI/CD plans back on track. I’m less than thrilled with having to throw dotnet build under the bus, but I’ve also spent more hours trying to crack this nut than I want — and I have whales need fryin’. Before I completely abandoned the dream of a pure .NET Core solution, I explored a few options. There is Scripty, which “lets you use Roslyn-powered C# scripts for code generation. You can think of it as a scripted alternative to T4 templates.” While it sounds promising, the project hasn’t been updated in a while and seems to have outstanding issues with .NET Core. There is also the issue of documentation — any examples of converting a T4 template to Scripty would be enormously helpful. Another promising option was T5, but no amount of tinkering prevailed against the ineffable and inscrutable refusal from Core to comply. Finally, there is scaffolding built into ASP.NET Core, but this is specific to Razor pages and not really a way to keep generated code in sync with metadata in the way I want to use it. Absent other ideas, T4 still seems like the best approach without a major rewrite. I should note, my specific use of T4 is not terribly complicated, and it would be easy to ditch the templates altogether and simply write the code entirely in C#, but then it would cease to be generic and defeat the purpose of this little exercise. I may emerge from this experiment with a different opinion, but for now I’ll assume that T4 will remain the backbone of the project (until proven differently). As always, this has been a long winded series of asides, a slow and drifting detour from the main point: T4 and .NET Core do not mix. The latter does not abide the former. There is hostility, vitriol and threats of malice aforethought between the two. How do I know this? My Current “Solution” To understand the problems with trying to migrate T4 into .NET Core, I think it useful to explain the challenges presented in .NET Framework. There are two paths to text transformation. The first is a developer convenience baked directly into Visual Studio since at least 2015. When you add a new .tt file into a project, VS immediately recognizes the template and offers a few convenience options for you as a developer: (1) whenever you save changes to the template, VS immediately runs text transform and the output is regenerated, (2) VS gives context menu options to manually transform (aka Run Custom Tool) and to debug the template, which will launch the debugger and allow you to set breakpoints anywhere, and (3) VS offers the option to run all transforms at the project/solution level. All of these features are hugely beneficial to the development of templates. But. And this is a big “but”. The second is through msbuild which is what I would normally use in my CI pipeline. Msbuild launches text transform in a different context than VS, which means that the relative paths (e.g. $(SolutionDir) )that work in VS no longer work from msbuild. In order to reconcile the two different behaviors, we need to make some changes to the .csproj file. Unfortunately, a project using .NET Framework has to be unloaded to be edited, then reloaded. Personally, I edit the project file directly in VS Code and let VS trigger the reload warning after I save changes. This is tedious, but it eliminates a few right-clicks. If we start with a T4 import that looks like this: #&amp;gt;&amp;lt;#@ assembly name=&quot;$(SolutionDir)CodeGeneration\\bin\\netstandard2.0\\CodeGeneration.Dll&quot; #&amp;gt;&amp;lt;#@ assembly name=&quot;$(SolutionDir)CodeGeneration\\bin\\netstandard2.0\\Newtonsoft.Json.Dll&quot; #&amp;gt;&amp;lt;#@ import namespace=&quot;Newtonsoft.Json&quot; #&amp;gt;&amp;lt;#@ import namespace=&quot;Newtonsoft.Json.Linq&quot; #&amp;gt;&amp;lt;#@ import namespace=&quot;CodeGeneration&quot; #&amp;gt; we have two immediate problems. $(SolutionDir) cannot resolve outside of VS, and our 3rd party dependency on Newtonsoft will not be available from the bin directory. Starting with the latter, you can add this into a property group in the project file: &amp;lt;PropertyGroup&amp;gt; &amp;lt;CopyLocalLockFileAssemblies&amp;gt;true&amp;lt;/CopyLocalLockFileAssemblies&amp;gt; &amp;lt;/PropertyGroup&amp;gt; Now, all reference binaries will be copied into the build output directory. Next, the challenge of resolving the path to that output directory can be solved as well. A custom mapping is required, which is also possible with a little XML markup: &amp;lt;PropertyGroup&amp;gt; &amp;lt;targetFolder&amp;gt;$(MSBuildProjectDirectory)\\..\\CodeGeneration\\bin\\netstandard2.0&amp;lt;/targetFolder&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;ItemGroup&amp;gt; &amp;lt;T4ParameterValues Include=&quot;targetFolder&quot;&amp;gt; &amp;lt;Value&amp;gt;$(targetFolder)&amp;lt;/Value&amp;gt; &amp;lt;/T4ParameterValues&amp;gt; &amp;lt;/ItemGroup&amp;gt; Now, I can update the T4 imports to: #&amp;gt;&amp;lt;#@ assembly name=&quot;$(targetFolder)\\CodeGeneration.Dll&quot; #&amp;gt;&amp;lt;#@ assembly name=&quot;$(targetFolder)\\Newtonsoft.Json.Dll&quot; And this will work seamlessly between VS and msbuild. There are a few other changes to make, but these are much more clearly documented elsewhere. For reference here, you also need: &amp;lt;Import Project=&quot;$(MSBuildToolsPath)\\Microsoft.CSharp.targets&quot; /&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;!-- Get the Visual Studio version: --&amp;gt; &amp;lt;VisualStudioVersion Condition=&quot;'$(VisualStudioVersion)' == ''&quot;&amp;gt;16.0&amp;lt;/VisualStudioVersion&amp;gt; &amp;lt;!-- Keep the next element all on one line: --&amp;gt; &amp;lt;VSToolsPath Condition=&quot;'$(VSToolsPath)' == ''&quot;&amp;gt;$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)&amp;lt;/VSToolsPath&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;!-- This is the important line: --&amp;gt; &amp;lt;Import Project=&quot;$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets&quot; /&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TransformOnBuild&amp;gt;true&amp;lt;/TransformOnBuild&amp;gt; &amp;lt;OverwriteReadOnlyOutputFiles&amp;gt;true&amp;lt;/OverwriteReadOnlyOutputFiles&amp;gt; &amp;lt;TransformOutOfDateOnly&amp;gt;false&amp;lt;/TransformOutOfDateOnly&amp;gt; &amp;lt;RunPostBuildEvent&amp;gt;Always&amp;lt;/RunPostBuildEvent&amp;gt; &amp;lt;/PropertyGroup&amp;gt; This is the final glue to ensure that you get identical behavior when compiling the project from any direction. Once all these pieces are in place, msbuild should just work. References: T4 Parameter Directive Pass build context data into the templates TransformOnBuild (I didn’t end up using this solution, but exploring the project helped me resolve some issues) My Struggle The next time I run into this class of problem, I definitely want to track all of my uncommitted changes and correlate each attempted fix with the relevant errors that occur which drive me to all the URLs and searches for answers as I attempt each new iteration of the fix. Then, ideally, I could blog about each stage of the journey with a little more coherence. For now and for the sake of the reader, I will simply list all of the relevant bits (that I can find in my browser history) that have led me to the conclusion that (as of this moment) T4 and Core cannot coexist. Incomplete Solutions: Re-implementation of T4 in Mono T4 Templates at Build Time with Dotnet Core T4Executer Relevant GitHub Issues: dotnet build fails to generate TypeGeneration.cs on linux Add MSBuild targets package Several FileNotFoundException using Newtonsoft.Json inside T4 template FileNotFoundException (System.Runtime, Version=4.2.1.0) when reflecting in T4 template Package type ‘DotnetCliTool’ is not supported by project PlatformNotSupportedException with dotnet-t4-project-tool build failing — and what worked for me Relevant StackOverflow Issues: T4 subtemplates TransformText() not working TextTemplating target in a .Net Core project The imported project “C:\Program Files\dotnet\sdk\2.1.201\Microsoft\VisualStudio\v15.0\WebApplications\Microsoft.WebApplication.targets” was not found Microsoft Docs: TextTransformation Class FileNotFoundException (System.Runtime, Version=4.2.1.0) when reflecting in T4 template in .NET Core 2.1 app As always, I hope this has helped someone with a similar quest. Please feel free to correct anything I have missed, suggest corrections or alternatives, or otherwise reach out to collaborate on solutions for this journey.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://crfroehlich.github.io/cellar/images/2019-07-10-code-generation-fail-an-all-the-kings-horses-tragedy.jpg" /><media:content medium="image" url="https://crfroehlich.github.io/cellar/images/2019-07-10-code-generation-fail-an-all-the-kings-horses-tragedy.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>